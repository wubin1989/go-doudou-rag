/**
* Generated by go-doudou v2.5.9.
* You can edit it as your need.
 */
package plugin

import (
	"github.com/glebarez/sqlite"
	"github.com/samber/do"
	"github.com/unionj-cloud/go-doudou/v2/framework/grpcx"
	"github.com/unionj-cloud/go-doudou/v2/framework/plugin"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/toolkit/pipeconn"
	"github.com/unionj-cloud/toolkit/stringutils"
	service "go-doudou-rag/module-knowledge"
	"go-doudou-rag/module-knowledge/config"
	"go-doudou-rag/module-knowledge/internal/dao"
	"go-doudou-rag/module-knowledge/internal/model"
	"go-doudou-rag/module-knowledge/transport/httpsrv"
	"google.golang.org/grpc"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
	"os"
)

var _ plugin.ServicePlugin = (*ModuleKnowledgePlugin)(nil)

type ModuleKnowledgePlugin struct {
	grpcConns []*grpc.ClientConn
}

func (receiver *ModuleKnowledgePlugin) Close() {
	for _, item := range receiver.grpcConns {
		item.Close()
	}
}

func (receiver *ModuleKnowledgePlugin) GoDoudouServicePlugin() {

}

func (receiver *ModuleKnowledgePlugin) GetName() string {
	name := os.Getenv("GDD_SERVICE_NAME")
	if stringutils.IsEmpty(name) {
		name = "cloud.unionj.ModuleKnowledge"
	}
	return name
}

func (receiver *ModuleKnowledgePlugin) Initialize(restServer *rest.RestServer, grpcServer *grpcx.GrpcServer, dialCtx pipeconn.DialContextFunc) {
	svc := do.MustInvoke[service.ModuleKnowledge](nil)
	routes := httpsrv.Routes(httpsrv.NewModuleKnowledgeHandler(svc))
	restServer.GroupRoutes("/moduleknowledge", routes)
	restServer.GroupRoutes("/moduleknowledge", rest.DocRoutes(service.Oas))
}

func init() {
	plugin.RegisterServicePlugin(&ModuleKnowledgePlugin{})

	do.Provide[service.ModuleKnowledge](nil, func(injector *do.Injector) (service.ModuleKnowledge, error) {
		conf := config.LoadFromEnv()

		db, err := gorm.Open(sqlite.Open(conf.Db.Dsn), &gorm.Config{
			Logger: logger.Default.LogMode(logger.Info),
		})
		if err != nil {
			panic("failed to connect database")
		}

		if err = db.AutoMigrate(&model.File{}); err != nil {
			panic(err)
		}

		dao.Use(db)

		svc := service.NewModuleKnowledge(conf)
		return svc, nil
	})
}
