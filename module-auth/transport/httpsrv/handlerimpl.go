/**
* Generated by go-doudou v2.5.9.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	service "go-doudou-rag/module-auth"
	"go-doudou-rag/module-auth/dto"
	"go-doudou-rag/module-auth/internal/model"
	"net/http"

	"github.com/bytedance/sonic"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
)

var json = sonic.ConfigDefault

type ModuleAuthHandlerImpl struct {
	moduleAuth service.ModuleAuth
}

func (receiver *ModuleAuthHandlerImpl) GetMe(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		data *model.User
		err  error
	)
	ctx = _req.Context()
	data, err = receiver.moduleAuth.GetMe(
		ctx,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data *model.User `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}

func NewModuleAuthHandler(moduleAuth service.ModuleAuth) ModuleAuthHandler {
	return &ModuleAuthHandlerImpl{
		moduleAuth,
	}
}

func (receiver *ModuleAuthHandlerImpl) PostLogin(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		req  dto.LoginReq
		data dto.LoginResp
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&req); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(req); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.moduleAuth.PostLogin(
		ctx,
		req,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.LoginResp `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
